
const express = require('express');
const fetch = require('node-fetch');
require('dotenv').config({ path: '../.env' });

const port = 5000;
const RIOT_API_KEY = process.env.SECRET;
const cors = require('cors');
const XLSX = require('xlsx');
const { makeTheFuckingSheet } = require('./utils');

const app = express();

app.use(cors())
app.use(express.json());


app.get('/summoner/:summonerName', async (req, res) => {

  let summonerID;
  let { summonerName } = req.params;
  let { count } = req.query; // get count from query parameter

  // validate count to be an integer between 0 and 250
  if (count && (isNaN(parseInt(count)) || parseInt(count) < 0 || parseInt(count) > 250)) {
    return res.status(400).json({ message: 'Invalid count parameter.' });
  }

  // set count to 1 if not provided in the query parameter
  count = count || 1;

  //==========================================================================RETURN PUUID=========================================================================
  try {
    region = 'na1'
    summonerURL = `https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-name/${summonerName}?api_key=${RIOT_API_KEY}`
    //get a summoners puuid by their summonerName
    let response = await fetch(summonerURL)
    let data = await response.json()
    console.log(data.puuid)
    summonerID = data.puuid
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error' });
  }
  //==========================================================================RETURN PUUID=========================================================================



  //==========================================================================RETURN MATCHID======================================================================= 
  let matchIdArray;

  try {

    region = 'americas'
    matchUrl = `https://${region}.api.riotgames.com/lol/match/v5/matches/by-puuid/${summonerID}/ids?start=0&count=${count}&api_key=${RIOT_API_KEY}`
    //get a summoners puuid by their summonerName
    let response = await fetch(matchUrl)
    let data = await response.json()
    matchIdArray = data
    console.log("\n\nmatchIDS fetch\n\n", data)
    console.log(matchUrl)
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error' });
  }
  //==========================================================================RETURN MATCHID=========================================================================



  //=================================================================RETURN ARRAY OF STATS OBJECTS===================================================================
  let matchDataArray = [];
  for (let matchId of matchIdArray) {
    let matchDataUrl = `https://${region}.api.riotgames.com/lol/match/v5/matches/${matchId}?api_key=${RIOT_API_KEY}`;
    response = await fetch(matchDataUrl);
    data = await response.json();

    // Check if the summoner participated in this match
    let summonerParticipant = data.info.participants.find(p => p.summonerName.toLowerCase() === summonerName.toLowerCase());
    if (summonerParticipant) {
      console.log('summonerParticipant:', summonerParticipant);
      const summonerStats = data.info.participants.find(p => p.summonerName.toLowerCase() === summonerName.toLowerCase()).stats;
      console.log('summonerStats:', summonerStats);
      const summonerData = { summonerName: summonerName, stats: summonerStats };
      console.log('summonerData:', summonerData);
      matchDataArray.push(summonerParticipant);
    }


  }

  res.json({ matchData: matchDataArray });


  //==================================================================RETURN ARRAY OF STATS OBJECTS==================================================================



});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
